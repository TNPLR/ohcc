OHCC(OH Compiler Collections) is a compiler - optimizer - virtual machine of any support languages.
Any language will be change to C.
Then, it will optimize C code.
It will use VM to run this code.

Simple structure (* = under construct, # still planning)

*ohc - The main OH Compilers
#oh++ - The OH C++ Compiler 
#ohpy - The OH Python Compiler
#ohjs - The OH JavaScript Compiler
*ohopt - The OH C Optimizer
*ohcc - The OH C Compiler
ohas - The OH Assembler
ohvm - The OH Virtual Machine

VM code (OHVM asm)

registers
ax
	For major usage
	It's index is the calculation result.
bx
	For the first operator storage.
cx
	For the second operator storage.
px
	Pointer register
pc
	Index: the program running
sp
	Index: stack top
bp
	Index: base pointer


sop start of program
txt .text segment
dat .data segment
bss .bss segment
mab // bx = ax
mac // cx = ax
mbc // bx = cx
mcb // bx = cx
mca // ax = cx
mba // ax = bx
map // px = ax
add // ax = bx + cx (unsigned)
sub // ax = bx - cx (unsigned)
adc // ax = bx + cx (signed)
sbc // ax = bx - cx (signed)
mul // ax = bx * cx (unsigned)
div // ax = bx / cx (unsigned)
mod // ax = bx % cx (unsigned)
mlc // ax = bx * cx (signed)
bvc // ax = bx / cx (signed)
mdc // ax = bx % cx (signed)
and // ax = bx & cx
orr // ax = bx | cx
eor // ax = bx ^ cx
shl // ax = bx << cx
shr // ax = bx >> cx
cpl // ax = ~bx;
ceq // ax = bx == cx
cne // ax = bx != cx
cgt // ax = bx > cx
clt // ax = bx < cx
cge // ax = bx >= cx
cle // ax = bx <= cx
not // ax = !bx;
ldi // ax = *(int*)px (interger)
ldc // ax = *(char*)px (charactor)
ldu // ax = *(unsigned int*)px (unsigned interger)
sdr // *px = ax (store ax to px)
jmp // goto px
jpf // goto px if bx == false
jpt // goto px if bx == true
psh // push bx onto stack
pop // pop stack to ax
cal // call px
ent // *--sp = (uint64_t)bp; bp = sp; sp = sp - bx;
adj // sp = sp + bx
lev // 
lea // 
lic // call libc of value bx
lon $number // load number into ax


The bit virtual code
sop
_start position
txt
...
... // .text
...
txt
txt
dat
...
... // .data
...
dat
dat
bss
...
... // .bss
...
bss
bss

assembly
Besides all the instruction, there are some more command
ASCII	NAME	"...........\n.........."
QUAD	NAME	VALUE or LABEL
QUAD	*	VALUE or LABEL // unnamed quad
LABEL	NAME
LON	NAME	// Read position
LON	NUMBER

PROGRAM
LON MAIN
QUAD * TEXT
QUAD * DATA
QUAD * BSS
TXT
LABEL TEXT
... // function
(SOP) //recommend add this SOP
TXT
TXT
DAT
LABEL DATA
... // data segment
(SOP) //recommend add this SOP
DAT
DAT
BSS
LABEL BSS
... // bss segment
(SOP) //recommend add this SOP
BSS
BSS


ohcc - The OH C Compiler

